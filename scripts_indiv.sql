-- Создание таблицы "Издания"
CREATE TABLE Издания (
    индекс_издания SERIAL PRIMARY KEY,
    название_издания VARCHAR(255) NOT NULL,
    вид_издания VARCHAR(50) NOT NULL,
    цена_1_экземпляра DECIMAL(10, 2) NOT NULL
);

-- Создание таблицы "Получатели"
CREATE TABLE Получатели (
    идентификатор_получателя SERIAL PRIMARY KEY,
    фио_подписчика VARCHAR(255) NOT NULL,
    улица VARCHAR(255) NOT NULL,
    номер_дома VARCHAR(10) NOT NULL,
    номер_квартиры VARCHAR(10) NOT NULL
);

-- Создание таблицы "Подписки"
CREATE TABLE Подписки (
    идентификатор_подписки SERIAL PRIMARY KEY,
    идентификатор_получателя INT,
    индекс_издания INT,
    дата_начала_подписки DATE NOT NULL,
    срок_подписки INT NOT NULL,
    стоимость_подписки DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (идентификатор_получателя) REFERENCES Получатели(идентификатор_получателя),
    FOREIGN KEY (индекс_издания) REFERENCES Издания(индекс_издания)
);

-- Создание таблицы "Доставка"
CREATE TABLE Доставка (
    идентификатор_доставки SERIAL PRIMARY KEY,
    идентификатор_подписки INT,
    дата_доставки DATE NOT NULL,
    стоимость_доставки DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (идентификатор_подписки) REFERENCES Подписки(идентификатор_подписки)
);

INSERT INTO Издания (название_издания, вид_издания, цена_1_экземпляра) VALUES
('Газета 1', 'Газета', 50.00),
('Газета 2', 'Газета', 60.00),
('Газета 3', 'Газета', 55.00),
('Газета 4', 'Газета', 40.00),
('Газета 5', 'Газета', 45.00),
('Журнал 1', 'Журнал', 100.00),
('Журнал 2', 'Журнал', 120.00),
('Журнал 3', 'Журнал', 110.00),
('Журнал 4', 'Журнал', 130.00),
('Журнал 5', 'Журнал', 115.00),
('Журнал 6', 'Журнал', 125.00),
('Журнал 7', 'Журнал', 135.00),
('Журнал 8', 'Журнал', 140.00),
('Журнал 9', 'Журнал', 150.00),
('Журнал 10', 'Журнал', 160.00),
('Журнал 11', 'Журнал', 170.00),
('Газета 6', 'Газета', 70.00),
('Газета 7', 'Газета', 80.00),
('Газета 8', 'Газета', 65.00),
('Газета 9', 'Газета', 75.00);

INSERT INTO Получатели (фио_подписчика, улица, номер_дома, номер_квартиры) VALUES
('Иванов Иван Иванович', 'ул. Ленина', '1', '1'),
('Петров Петр Петрович', 'ул. Гагарина', '2', '2'),
('Сидоров Сидор Сидорович', 'ул. Пушкина', '3', '3'),
('Кузнецов Николай Николаевич', 'ул. Мира', '4', '4'),
('Смирнов Алексей Алексеевич', 'ул. Советская', '5', '5'),
('Васильев Василий Васильевич', 'ул. Победы', '6', '6'),
('Морозов Дмитрий Дмитриевич', 'ул. Жукова', '7', '7'),
('Федоров Федор Федорович', 'ул. Калинина', '8', '8'),
('Ковалев Евгений Евгеньевич', 'ул. Кузнецова', '9', '9'),
('Волков Владимир Владимирович', 'ул. Гагарина', '10', '10'),
('Егоров Егор Егорович', 'ул. Ленина', '11', '11'),
('Захаров Захар Захарович', 'ул. Мира', '12', '12'),
('Лебедев Леонид Леонидович', 'ул. Советская', '13', '13'),
('Медведев Михаил Михайлович', 'ул. Победы', '14', '14'),
('Николаев Николай Николаевич', 'ул. Жукова', '15', '15'),
('Павлов Павел Павлович', 'ул. Калинина', '16', '16'),
('Романов Роман Романович', 'ул. Кузнецова', '17', '17'),
('Семёнов Семён Семёнович', 'ул. Гагарина', '18', '18'),
('Титов Тимофей Тимофеевич', 'ул. Ленина', '19', '19'),
('Ушаков Ульян Ульянович', 'ул. Мира', '20', '20');

INSERT INTO Подписки (идентификатор_получателя, индекс_издания, дата_начала_подписки, срок_подписки, стоимость_подписки) VALUES
(1, 1, '2024-01-01', 12, 600.00),
(2, 2, '2024-02-01', 6, 360.00),
(3, 3, '2024-03-01', 3, 165.00),
(4, 4, '2024-04-01', 1, 40.00),
(5, 5, '2024-05-01', 12, 540.00),
(6, 6, '2024-06-01', 12, 1200.00),
(7, 7, '2024-07-01', 6, 720.00),
(8, 8, '2024-08-01', 3, 330.00),
(9, 9, '2024-09-01', 1, 130.00),
(10, 10, '2024-10-01', 12, 1380.00),
(11, 11, '2024-11-01', 6, 1020.00),
(12, 12, '2024-12-01', 3, 375.00),
(13, 13, '2024-01-15', 1, 150.00),
(14, 14, '2024-02-15', 12, 1680.00),
(15, 15, '2024-03-15', 6, 1020.00),
(16, 16, '2024-04-15', 3, 375.00),
(17, 17, '2024-05-15', 1, 125.00),
(18, 18, '2024-06-15', 12, 1500.00),
(19, 19, '2024-07-15', 6, 900.00),
(20, 20, '2024-08-15', 3, 225.00);

INSERT INTO Доставка (идентификатор_подписки, дата_доставки, стоимость_доставки) VALUES
(1, '2024-02-01', 6.00),
(2, '2024-03-01', 3.60),
(3, '2024-04-01', 1.65),
(4, '2024-05-01', 0.40),
(5, '2024-06-01', 5.40),
(6, '2024-07-01', 12.00),
(7, '2024-08-01', 7.20),
(8, '2024-09-01', 3.30),
(9, '2024-10-01', 1.30),
(10, '2024-11-01', 13.80),
(11, '2024-12-01', 10.20),
(12, '2025-01-01', 3.75),
(13, '2025-02-01', 1.50),
(14, '2025-03-01', 16.80),
(15, '2025-04-01', 10.20),
(16, '2025-05-01', 3.75),
(17, '2025-06-01', 1.25),
(18, '2025-07-01', 15.00),
(19, '2025-08-01', 9.00),
(20, '2025-09-01', 2.25);



-- Сформировать SQL-запрос, который возвращает список получателей (имя и фамилия) и суммарную стоимость подписок каждого получателя
-- Запрос возвращает список получателей и суммарную стоимость подписок каждого получателя.
-- SELECT: выбирает столбец фио_подписчика и вычисляет суммарную стоимость подписок (SUM).
-- FROM: указывает таблицу Получатели.
-- JOIN: объединяет таблицу Подписки  с Получатели по полю идентификатор_получателя.
-- GROUP BY: группирует результаты по имени и фамилии получателей.
SELECT
    p.фио_подписчика,
    SUM(s.стоимость_подписки) AS TotalSubscriptionCost
FROM
    Получатели p
JOIN
    Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
GROUP BY
    p.фио_подписчика;

-- Отсортировать полученный список по убыванию суммарной стоимости подписок получателя
-- Запрос аналогичен предыдущему, но добавляет сортировку по суммарной стоимости подписок в порядке убывания.
-- SELECT, FROM, JOIN, GROUP BY: аналогично предыдущему запросу.
-- ORDER BY: указывает сортировку по TotalSubscriptionCost в порядке убывания (DESC).
SELECT
    p.фио_подписчика,
    SUM(s.стоимость_подписки) AS TotalSubscriptionCost
FROM
    Получатели p
JOIN
    Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
GROUP BY
    p.фио_подписчика
ORDER BY
    TotalSubscriptionCost DESC;

-- Добавить столбец со средней суммарной стоимостью подписок
-- Запрос аналогичен предыдущему, но добавляет столбец AverageSubscriptionCost с общей средней стоимостью подписок.
-- SELECT, FROM, JOIN, GROUP BY, ORDER BY: аналогично предыдущему запросу.
-- AVG(SUM(s.стоимость_подписки)) OVER (): вычисляет среднее значение по суммарной стоимости подписок.
SELECT
    p.фио_подписчика,
    SUM(s.стоимость_подписки) AS TotalSubscriptionCost,
    AVG(SUM(s.стоимость_подписки)) OVER () AS AverageSubscriptionCost
FROM
    Получатели p
JOIN
    Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
GROUP BY
    p.фио_подписчика
ORDER BY
    TotalSubscriptionCost DESC;

-- Вывести получателя с наибольшей суммарной стоимостью подписок
-- Запрос возвращает одного получателя с наибольшей суммарной стоимостью подписок.
-- LIMIT 1: ограничивает результат одним получателем с наибольшей суммарной стоимостью подписок.
SELECT
    p.фио_подписчика,
    SUM(s.стоимость_подписки) AS TotalSubscriptionCost
FROM
    Получатели p
JOIN
    Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
GROUP BY
    p.фио_подписчика
ORDER BY
    TotalSubscriptionCost DESC
LIMIT 1;

-- Вывести список подписок получателя с наибольшей суммарной стоимостью подписок
-- Запрос возвращает список подписок получателя с наибольшей суммарной стоимостью подписок.
-- WITH: временная таблица TopRecipient, содержащая получателя с наибольшей суммарной стоимостью подписок.
-- SELECT, FROM, JOIN, GROUP BY, ORDER BY, LIMIT: используются для создания TopRecipient.
-- Основной SELECT: выбирает идентификатор_подписки и стоимость_подписки из Подписки, связывая их с TopRecipient по идентификатор_получателя.
-- ORDER BY: сортирует подписки по стоимости в порядке возрастания.
WITH TopRecipient AS (
    SELECT
        p.идентификатор_получателя,
        p.фио_подписчика,
        SUM(s.стоимость_подписки) AS TotalSubscriptionCost
    FROM
        Получатели p
    JOIN
        Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
    GROUP BY
        p.идентификатор_получателя, p.фио_подписчика
    ORDER BY
        TotalSubscriptionCost DESC
    LIMIT 1
)
SELECT
    s.идентификатор_подписки,
    s.стоимость_подписки
FROM
    Подписки s
JOIN
    TopRecipient tr ON s.идентификатор_получателя = tr.идентификатор_получателя
ORDER BY
    s.стоимость_подписки ASC;

-- Вывести только тех получателей, у которых суммарная стоимость подписок превышает среднюю суммарную стоимость подписок
-- Запрос возвращает получателей, чья суммарная стоимость подписок превышает среднюю.

-- WITH: временные таблицы RecipientTotals и AverageTotal.
-- RecipientTotals: суммирует стоимость подписок по каждому получателю.
-- AverageTotal: вычисляет среднюю суммарную стоимость подписок по всем получателям.
-- Основной SELECT: выбирает получателей, чья суммарная стоимость подписок превышает среднюю.
WITH RecipientTotals AS (
    SELECT
        p.фио_подписчика,
        SUM(s.стоимость_подписки) AS TotalSubscriptionCost
    FROM
        Получатели p
    JOIN
        Подписки s ON p.идентификатор_получателя = s.идентификатор_получателя
    GROUP BY
        p.фио_подписчика
),
AverageTotal AS (
    SELECT
        AVG(TotalSubscriptionCost) AS AverageSubscriptionCost
    FROM
        RecipientTotals
)
SELECT
    rt.фио_подписчика,
    rt.TotalSubscriptionCost,
    at.AverageSubscriptionCost
FROM
    RecipientTotals rt,
    AverageTotal at
WHERE
    rt.TotalSubscriptionCost > at.AverageSubscriptionCost;
